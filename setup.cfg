[metadata]
name = panther
summary = Security oriented static analyser for python code.
description-file =
    README.rst
author = OpenStack Security Group
author-email = openstack-dev@lists.openstack.org
home-page = https://wiki.openstack.org/wiki/Security/Projects/Panther
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    Intended Audience :: Developers
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Operating System :: MacOS :: MacOS X
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5
    Topic :: Security

[entry_points]
console_scripts =
    panther = panther.cli.main:main
    panther-config-generator = panther.cli.config_generator:main
    panther-baseline = panther.cli.baseline:main
panther.formatters =
    csv = panther.formatters.csv:report
    json = panther.formatters.json:report
    txt = panther.formatters.text:report
    xml = panther.formatters.xml:report
    html = panther.formatters.html:report
    screen = panther.formatters.screen:report
    yaml = panther.formatters.yaml:report
    custom = panther.formatters.custom:report
panther.plugins =
    # panther/plugins/app_debug.py
    flask_debug_true = panther.plugins.app_debug:flask_debug_true

    # panther/plugins/asserts.py
    assert_used = panther.plugins.asserts:assert_used

    # panther/plugins/crypto_request_no_cert_validation.py
    request_with_no_cert_validation = panther.plugins.crypto_request_no_cert_validation:request_with_no_cert_validation

    # panther/plugins/exec_as_root.py
    execute_with_run_as_root_equals_true = panther.plugins.exec_as_root:execute_with_run_as_root_equals_true

    # panther/plugins/exec.py
    exec_used = panther.plugins.exec:exec_used

    # panther/plugins/general_bad_File_permissions.py
    set_bad_file_permissions = panther.plugins.general_bad_file_permissions:set_bad_file_permissions

    # panther/plugins/general_bind_all_interfaces.py
    hardcoded_bind_all_interfaces = panther.plugins.general_bind_all_interfaces:hardcoded_bind_all_interfaces

    # panther/plugins/general_hardcoded_password.py
    hardcoded_password_string = panther.plugins.general_hardcoded_password:hardcoded_password_string
    never_ever_ever_use_eval = panther.plugins.general_hardcoded_password:never_ever_ever_use_eval
    hardcoded_password_default = panther.plugins.general_hardcoded_password:hardcoded_password_default

    # panther/plugins/general_hardcoded_tmp.py
    hardcoded_tmp_directory = panther.plugins.general_hardcoded_tmp:hardcoded_tmp_directory

    # panther/plugins/injection_paramiko.py
    paramiko_calls = panther.plugins.injection_paramiko:paramiko_calls

    # panther/plugins/injection_shell.py
    subprocess_popen_with_shell_equals_true = panther.plugins.injection_shell:subprocess_popen_with_shell_equals_true
    subprocess_without_shell_equals_true = panther.plugins.injection_shell:subprocess_without_shell_equals_true
    any_other_function_with_shell_equals_true = panther.plugins.injection_shell:any_other_function_with_shell_equals_true
    start_process_with_a_shell = panther.plugins.injection_shell:start_process_with_a_shell
    start_process_with_no_shell = panther.plugins.injection_shell:start_process_with_no_shell
    start_process_with_partial_path = panther.plugins.injection_shell:start_process_with_partial_path

    # panther/plugins/injection_sql.py
    hardcoded_sql_expressions = panther.plugins.injection_sql:hardcoded_sql_expressions

    # panther/plugins/hashlib_new_insecure_functions.py
    hashlib_new_insecure_functions = panther.plugins.hashlib_new_insecure_functions:hashlib_new

    # panther/plugins/injection_wildcard.py
    linux_commands_wildcard_injection = panther.plugins.injection_wildcard:linux_commands_wildcard_injection

    # panther/plugins/insecure_ssl_tls.py
    ssl_with_bad_version = panther.plugins.insecure_ssl_tls:ssl_with_bad_version
    ssl_with_bad_defaults = panther.plugins.insecure_ssl_tls:ssl_with_bad_defaults
    ssl_with_no_version = panther.plugins.insecure_ssl_tls:ssl_with_no_version

    # panther/plugins/jinja2_templates.py
    jinja2_autoescape_false = panther.plugins.jinja2_templates:jinja2_autoescape_false

    # panther/plugins/mako_templates.py
    use_of_mako_templates = panther.plugins.mako_templates:use_of_mako_templates

    # panther/plugins/secret_config_options.py
    password_config_option_not_marked_secret = panther.plugins.secret_config_option:password_config_option_not_marked_secret

    # panther/plugins/try_except_continue.py
    try_except_continue = panther.plugins.try_except_continue:try_except_continue

    # panther/plugins/try_except_pass.py
    try_except_pass = panther.plugins.try_except_pass:try_except_pass

    # panther/plugins/weak_cryptographic_key.py
    weak_cryptographic_key = panther.plugins.weak_cryptographic_key:weak_cryptographic_key

    # panther/plugins/yaml_load.py
    yaml_load = panther.plugins.yaml_load:yaml_load

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[pbr]
autodoc_tree_index_modules = True
autodoc_tree_excludes =
  examples*

[bdist_wheel]
universal = 1
